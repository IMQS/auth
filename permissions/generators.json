{
  "generators": [
    {
      "name": "java",
      "class_shell": "package za.co.imqs.common.security;\n\n/**\n * =======================\n * DO NOT EDIT THIS ENUM!\n * =======================\n *\n * This enum was generated by the permissions_generator.rb script.\n * Should you wish to add a new IMQS V8 permission, follow the instructions\n * to regenerate this class at:\n *\n * https://imqssoftware.atlassian.net/wiki/display/ASC/Generating+Permissions\n */\n  public enum Permissions {\n\nENUMS\n\tprivate final int code;\n\tprivate final String name;\n\tprivate final String description;\n\n\tPermissions(int code, String name, String description) {\n\t\tthis.code = code;\n\t\tthis.name = name;\n\t\tthis.description = description;\n\t}\n\n\tpublic int getCode() {\n\t\treturn code;\n\t}\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\n\tpublic String getDescription() {\n\t\treturn description;\n\t}\n}",
      "permission_procs": {
        "ENUMS": "|permission| code = code + \"\\t#{camel_to_snake(permissions[permission]['v']).upcase}(#{permission}, \\\"#{permissions[permission]['n']} \\\", \\\"#{permissions[permission]['d']}\\\"),\n\""
      },
      "post_proc": "class_shell = class_shell.sub(\",\n\n\tprivate\", \";\n\n\tprivate\")",
      "target_path": "/common/src/main/java/za/co/imqs/common/security/Permissions.java"
    },
    {
      "name": "golang",
      "class_shell": "package imqsauth\n\nimport (\n\t\"github.com/IMQS/authaus\"\n)\n\n// ======================\n// DO NOT EDIT THIS FILE!\n// ======================\n//\n// This code was generated by the permissions_generator.rb script.\n// Should you wish to add a new IMQS V8 permission, follow the instructions\n// to regenerate this class at:\n//\n// https://imqssoftware.atlassian.net/wiki/display/ASC/Generating+Permissions\n//\n// IMQS permission bits (each number in the range 0..65535 means something)\n\nconst (\nGENERAL\n)\n\n// Mapping from 16-bit permission integer to string-based name\nvar PermissionsTable authaus.PermissionNameTable\n\nfunc init() {\n\tPermissionsTable = authaus.PermissionNameTable{}\n\n\t// It is better not to include the 'zero' permission in here, otherwise it leaks\n\t// out into things like an inverted map from permission name to permission number.\n\nTABLE\n}",
      "permission_procs": {
        "GENERAL": "|permission| code = code + \"\\tPerm#{camel_to_pascal(permissions[permission]['v'])} authaus.PermissionU16 = #{permission} //#{permissions[permission]['d']}\n\"",
        "TABLE": "|permission| if permissions[permission]['a']\n code = code + \"\\tPermissionsTable[Perm#{camel_to_pascal(permissions[permission]['v'])}] = \\\"#{permissions[permission]['v'].downcase}\\\" //#{permissions[permission]['d']}\n\" \nend"
      },
      "target_path": "/auth/src/github.com/IMQS/imqsauth/imqsauth/perms.go"
    },
    {
      "name": "cpp",
      "class_shell": "#pragma once\n\n// ======================\n// DO NOT EDIT THIS FILE!\n// ======================\n//\n// This code was generated by the permissions_generator.rb script.\n// Should you wish to add a new IMQS V8 permission, follow the instructions\n// to regenerate this class at:\n//\n// https://imqssoftware.atlassian.net/wiki/display/ASC/Generating+Permissions\n\nenum ImqsAuthPermBits\n{\n\t// These are generated by /InfrastructureBuild/auth/permissions/permissions_generator.rb\n\nENUMS\n};",
      "permission_procs": {
        "ENUMS": "|permission| code = code + \"\\tImqsAuthPerm_#{camel_to_pascal(permissions[permission]['v'])} = #{permission}, // #{permissions[permission]['d']}\n\""
      },
      "target_path": "/otaku/proj/ImqsServer/ImqsAuth.h"
    },
    {
      "name": "typescript",
      "class_shell": "/**\n * ======================\n * DO NOT EDIT THIS FILE!\n * ======================\n *\n * This permissions.ts file was generated by the permissions_generator.rb script.\n * Should you wish to add a new IMQS V8 permission, follow the instructions\n * to regenerate this class at:\n *\n * https://imqssoftware.atlassian.net/wiki/display/ASC/Generating+Permissions\n */\nnamespace iq {\n\texport namespace auth {\n\n\t\texport class Permission {\n\t\t\tid: string;\n\t\t\tfriendlyName: string;\n\t\t\tdescription: string;\n\t\t\tmodule: AuthModule;\n\n\t\t\tconstructor(id: string, friendlyName: string, description: string, module: AuthModule) {\n\t\t\t\tthis.id = id;\n\t\t\t\tthis.friendlyName = friendlyName;\n\t\t\t\tthis.description = description;\n\t\t\t\tthis.module = module;\n\t\t\t}\n\t\t}\n\n\t\t// List of permissions in imqsauth project (search for 'PermissionsTable')\n\t\texport var Permissions = {\nPERMISSIONS\t\t};\n\n\t\t/** @suppress {suspiciousCode} */\n\t\texport var permissionsArray: iq.auth.Permission[];\n\n\t\t// populate RoleArray\n\t\t(function () {\n\t\t\tiq.auth.permissionsArray = [];\n\t\t\tfor (let key in iq.auth.Permissions) {\n\t\t\t\tif (iq.auth.Permissions.hasOwnProperty(key)) {\n\t\t\t\t\tiq.auth.permissionsArray.push(iq.auth.Permissions[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t} ());\n\n\t\texport function getPermissionByID(id: string): iq.auth.Permission {\n\t\t\tfor (let i = 0; i < iq.auth.permissionsArray.length; i++) {\n\t\t\t\tif (iq.auth.permissionsArray[i].id === id)\n\t\t\t\t\treturn iq.auth.permissionsArray[i];\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n}",
      "permission_procs": {
        "PERMISSIONS": "|permission| code = code + \"\\t\\t\\t#{permissions[permission]['v']}: new iq.auth.Permission(\\\"#{permission}\\\", \\\"#{permissions[permission]['n']}\\\", \\\"#{permissions[permission]['d']}\\\", AuthModule.#{permissions[permission]['m']}),\n\""
      },
      "target_path": "/www/js/auth/permissions.ts"
    }
  ]
}